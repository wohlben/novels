# Generated by Django 2.1.4 on 2019-01-01 16:41

from django.db import migrations
import collections


def delete_duplicate_fictions(apps, schema_editor):
    Fiction = apps.get_model("novels", "Fiction")
    Chapter = apps.get_model("novels", "Chapter")
    ParseLog = apps.get_model("scrapes", "ParseLog")
    remote_ids_qs = Fiction.objects.all().values("remote_id")
    remote_ids = [i["remote_id"] for i in remote_ids_qs]
    duplicate_remote_ids = [
        i for i, count in collections.Counter(remote_ids).items() if count > 1
    ]
    Fiction.objects.filter(remote_id__in=duplicate_remote_ids).delete()
    all_chapter_remote_ids_qs = Chapter.objects.all().values("remote_id")
    all_chapter_remote_ids = [i["remote_id"] for i in all_chapter_remote_ids_qs]
    duplicate_chapter_remote_ids = [
        i
        for i, count in collections.Counter(all_chapter_remote_ids).items()
        if count > 1
    ]
    Chapter.objects.filter(remote_id__in=duplicate_chapter_remote_ids).delete()

    # some chapters might not be available otherwise, so we need to reparse everything...
    ParseLog.objects.all().delete()


def recover_fictions(apps, schema_editor):
    # not relevant, deleted fictions will be recreated on the next parse
    pass


class Migration(migrations.Migration):

    dependencies = [("novels", "0007_chapter_total_progress")]

    operations = [
        migrations.RunPython(delete_duplicate_fictions, reverse_code=recover_fictions)
    ]
